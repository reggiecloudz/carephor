# Generated by Django 3.2.18 on 2023-05-17 06:13

from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='full name')),
                ('phone_number', models.CharField(blank=True, max_length=16, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format '+123456789'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='phone number')),
                ('birthdate', models.DateField(blank=True, null=True, verbose_name='birthdate')),
                ('gender', models.CharField(blank=True, choices=[('Female', 'Female'), ('Male', 'Male'), ('Non-Binary', 'Non-Binary')], max_length=14, null=True, verbose_name='gender')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='members/%Y/%m/%d/', verbose_name='photo')),
                ('address', models.CharField(blank=True, max_length=50, null=True, verbose_name='address')),
                ('city', models.CharField(blank=True, max_length=50, null=True, verbose_name='city')),
                ('country', models.CharField(blank=True, max_length=50, null=True, verbose_name='country')),
                ('state', models.CharField(blank=True, max_length=50, null=True, verbose_name='state')),
                ('zip', models.CharField(blank=True, max_length=12, null=True, verbose_name='zip')),
                ('is_member', models.BooleanField(blank=True, default=False, verbose_name='member status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', users.managers.AppUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'connection',
                'verbose_name_plural': 'connections',
            },
        ),
        migrations.CreateModel(
            name='ConnectionRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Accepted', 'Accepted'), ('Declined', 'Declined')], default='Pending', max_length=50, null=True, verbose_name='status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'connection request',
                'verbose_name_plural': 'connection requests',
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(blank=True, unique=True, verbose_name='slug')),
                ('about', models.TextField(blank=True, default='', verbose_name='about')),
                ('cover_photo', models.ImageField(blank=True, null=True, upload_to='members/%Y/%m/%d/', verbose_name='cover photo')),
                ('occupation', models.CharField(blank=True, default='Not Provided', max_length=255, verbose_name='occupation')),
                ('education', models.CharField(blank=True, choices=[('Less-than High School', 'Less-than High School'), ('High School', 'High School'), ('College', 'College'), ('Not Specified', 'Not Specified')], default='Not Specified', max_length=75, verbose_name='education')),
                ('orientation', models.CharField(blank=True, choices=[('Bisexual', 'Bisexual'), ('Gay', 'Gay'), ('Heterosexual', 'Heterosexual'), ('Lesbian', 'Lesbian'), ('Pansexual', 'Pansexual'), ('Not Specified', 'Not Specified')], default='Not Specified', max_length=75, verbose_name='orientation')),
                ('political_ideology', models.CharField(blank=True, choices=[('Anarchism', 'Anarchism'), ('Communism', 'Communism'), ('Conservatism', 'Conservatism'), ('Democracy', 'Democracy'), ('Environmentalism', 'Environmentalism'), ('Liberalism', 'Liberalism'), ('Libertarianism', 'Libertarianism'), ('Nationalism', 'Nationalism'), ('Non-political', 'Non-political'), ('Populism', 'Populism'), ('Progressivism', 'Progressivism'), ('Social Democracy', 'Social Democracy'), ('Socialism', 'Socialism'), ('Transhumanism', 'Transhumanism'), ('Not Specified', 'Not Specified')], default='Not Specified', max_length=75, verbose_name='political ideology')),
                ('religion', models.CharField(blank=True, choices=[('Bahai Faith', 'Bahai Faith'), ('Buddhism', 'Buddhism'), ('Christianity', 'Christianity'), ('Druze', 'Druze'), ('Traditional Religion', 'Traditional Religion'), ('Hinduism', 'Hinduism'), ('Islam', 'Islam'), ('Jainism', 'Jainism'), ('Judaism', 'Judaism'), ('None', 'None'), ('Paganism', 'Paganism'), ('Sikhism', 'Sikhism'), ('Scientology', 'Scientology'), ('Shinto', 'Shinto'), ('Spiritism', 'Spiritism'), ('Spiritual', 'Spiritual (but not listed)'), ('Taoism', 'Taoism'), ('Unaffiliated', 'Unaffiliated'), ('Vodou', 'Vodou'), ('Zoroastrianism', 'Zoroastrianism'), ('Not Specified', 'Not Specified')], default='Not Specified', max_length=75, verbose_name='religion')),
                ('interests', models.JSONField(blank=True, default=list, null=True, verbose_name='interests')),
                ('values', models.JSONField(blank=True, default=list, null=True, verbose_name='values')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('connection_requests', models.ManyToManyField(blank=True, related_name='_users_member_connection_requests_+', through='users.ConnectionRequest', to='users.Member', verbose_name='connection requests')),
                ('connections', models.ManyToManyField(blank=True, related_name='_users_member_connections_+', through='users.Connection', to='users.Member', verbose_name='connections')),
                ('identity', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='member', to=settings.AUTH_USER_MODEL, verbose_name='identity')),
            ],
            options={
                'verbose_name': 'member',
                'verbose_name_plural': 'members',
            },
        ),
        migrations.AddField(
            model_name='connectionrequest',
            name='receiver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_requests', to='users.member', verbose_name='receiver'),
        ),
        migrations.AddField(
            model_name='connectionrequest',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_requests', to='users.member', verbose_name='sender'),
        ),
        migrations.AddField(
            model_name='connection',
            name='receiver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receiver_connections', to='users.member', verbose_name='receiver'),
        ),
        migrations.AddField(
            model_name='connection',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sender_connections', to='users.member', verbose_name='sender'),
        ),
    ]
